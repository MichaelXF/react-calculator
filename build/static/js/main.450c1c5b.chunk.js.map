{"version":3,"sources":["assets/iPhone12.png","assets/iPhone12.webp","NumberButton.js","OperatorButton.js","App.js","NumberWithCommas.js","reportWebVitals.js","index.js"],"names":["NumberButton","className","number","dispatch","onClick","type","payload","toString","OperatorButton","operator","symbol","state","currentNumber","App","useReducer","action","compute","overrideOperator","output","num1","parseFloat","previousNumber","num2","Error","JSON","stringify","Number","includes","length","display","x","parts","split","replace","join","numberWithCommas","fontSize","src","iPhone12","alt","style","filter","iPhone12Webp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.450c1c5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iPhone12.07088938.png\";","export default __webpack_public_path__ + \"static/media/iPhone12.ca26b36b.webp\";","export default function NumberButton({ className, number, dispatch }) {\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        dispatch({\r\n          type: \"add_number\",\r\n          payload: number.toString(),\r\n        });\r\n      }}\r\n      className={className}\r\n    >\r\n      {number}\r\n    </button>\r\n  );\r\n}\r\n","export default function OperatorButton({ operator, symbol, dispatch, state }) {\r\n  return (\r\n    <button\r\n      className={\r\n        \"orange\" +\r\n        (state.operator === operator && !state.currentNumber ? \" active\" : \"\")\r\n      }\r\n      onClick={() => {\r\n        dispatch({ type: \"set_operator\", payload: operator });\r\n      }}\r\n    >\r\n      {symbol}\r\n    </button>\r\n  );\r\n}\r\n","import { useReducer } from \"react\";\nimport iPhone12 from \"./assets/iPhone12.png\";\nimport iPhone12Webp from \"./assets/iPhone12.webp\";\nimport NumberButton from \"./NumberButton\";\nimport numberWithCommas from \"./NumberWithCommas\";\nimport OperatorButton from \"./OperatorButton\";\n\nfunction App() {\n  var [state, dispatch] = useReducer(\n    (state, action) => {\n      function compute(overrideOperator) {\n        var num1 = parseFloat(state.previousNumber);\n        var num2 = parseFloat(state.currentNumber);\n\n        var output;\n\n        switch (overrideOperator || state.operator) {\n          case \"+\":\n            output = num1 + num2;\n            break;\n          case \"-\":\n            output = num1 - num2;\n            break;\n          case \"/\":\n            output = num1 / num2;\n            break;\n          case \"*\":\n            output = num1 * num2;\n            break;\n          default:\n            throw new Error(JSON.stringify([state, overrideOperator]));\n        }\n\n        return output + \"\";\n      }\n\n      switch (action.type) {\n        case \"plus_minus\":\n          return {\n            ...state,\n            currentNumber: (-Number(state.currentNumber || \"0\")).toString(),\n          };\n        case \"percentage\":\n          return {\n            ...state,\n            currentNumber: (\n              Number(state.currentNumber || \"0\") / 100\n            ).toString(),\n          };\n\n        case \"clear\":\n          return {\n            currentNumber: \"0\",\n            previousNumber: \"\",\n            operator: \"\",\n          };\n\n        case \"add_number\":\n          if (action.payload === \".\" && state.currentNumber.includes(\".\")) {\n            return { ...state };\n          }\n\n          if (action.payload === \"0\" && state.currentNumber === \"0\") {\n            return { ...state };\n          }\n\n          if (state.currentNumber.length > 8) {\n            return { ...state };\n          }\n\n          if (action.payload !== \".\" && state.currentNumber === \"0\") {\n            return { ...state, currentNumber: action.payload };\n          }\n\n          return {\n            ...state,\n            currentNumber: (state.currentNumber + action.payload).toString(),\n          };\n\n        case \"set_operator\":\n          if (!state.currentNumber) {\n            return {\n              ...state,\n              operator: action.payload,\n            };\n          }\n          if (!state.previousNumber) {\n            return {\n              previousNumber: state.currentNumber,\n              currentNumber: \"\",\n              operator: action.payload,\n            };\n          }\n\n          return {\n            previousNumber: compute(action.payload),\n            currentNumber: \"\",\n            operator: \"\",\n          };\n\n        case \"evaluate\":\n          if (\n            !state.currentNumber ||\n            !state.previousNumber ||\n            !state.operator\n          ) {\n            return { ...state };\n          }\n          return {\n            previousNumber: compute(),\n            currentNumber: \"\",\n            operator: \"\",\n          };\n\n        default:\n          throw new Error();\n      }\n    },\n    {\n      currentNumber: \"0\",\n      previousNumber: \"\",\n      operator: \"\",\n    }\n  );\n\n  var displayNumber = state.currentNumber || state.previousNumber;\n  var display = numberWithCommas(displayNumber);\n  var fontSize = 70;\n\n  while ((fontSize * display.length) / 2 > 280) {\n    fontSize--;\n  }\n\n  return (\n    <div className='calculator-container'>\n      <div className='calculator'>\n        <img\n          className='calculator-background-image'\n          src={iPhone12}\n          alt='iPhone 12'\n          style={{\n            filter: \"grayscale(100%) brightness(6%)\",\n          }}\n        />\n        <img\n          className='calculator-background-image-notch'\n          src={iPhone12Webp}\n          alt='iPhone 12 Notch'\n        />\n\n        <div className='calculator-content'>\n          <div\n            className='calculator-operand'\n            style={{\n              fontSize: fontSize,\n            }}\n          >\n            {display}\n          </div>\n\n          <div className='calculator-row'>\n            <button\n              className='gray'\n              onClick={() => {\n                dispatch({ type: \"clear\" });\n              }}\n            >\n              {!state.previousNumber && !state.currentNumber ? \"A\" : \"\"}C\n            </button>\n            <button\n              className='gray'\n              onClick={() => {\n                dispatch({ type: \"plus_minus\" });\n              }}\n            >\n              ±\n            </button>\n            <button\n              className='gray'\n              onClick={() => {\n                dispatch({ type: \"percentage\" });\n              }}\n            >\n              %\n            </button>\n            <OperatorButton\n              operator='/'\n              symbol='÷'\n              dispatch={dispatch}\n              state={state}\n            />\n          </div>\n          <div className='calculator-row'>\n            <NumberButton number={7} dispatch={dispatch} />\n            <NumberButton number={8} dispatch={dispatch} />\n            <NumberButton number={9} dispatch={dispatch} />\n            <OperatorButton\n              operator='*'\n              symbol='×'\n              dispatch={dispatch}\n              state={state}\n            />\n          </div>\n          <div className='calculator-row'>\n            <NumberButton number={4} dispatch={dispatch} />\n            <NumberButton number={5} dispatch={dispatch} />\n            <NumberButton number={6} dispatch={dispatch} />\n            <OperatorButton\n              operator='-'\n              symbol='−'\n              dispatch={dispatch}\n              state={state}\n            />\n          </div>\n          <div className='calculator-row'>\n            <NumberButton number={1} dispatch={dispatch} />\n            <NumberButton number={2} dispatch={dispatch} />\n            <NumberButton number={3} dispatch={dispatch} />\n            <OperatorButton\n              operator='+'\n              symbol='+'\n              dispatch={dispatch}\n              state={state}\n            />\n          </div>\n          <div className='calculator-row'>\n            <NumberButton className='span-2' number={0} dispatch={dispatch} />\n\n            <NumberButton number={\".\"} dispatch={dispatch} />\n            <button\n              className='orange'\n              onClick={() => {\n                dispatch({ type: \"evaluate\" });\n              }}\n            >\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\r\n * @param {*} x\r\n * @returns\r\n * @url https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n */\r\nexport default function numberWithCommas(x) {\r\n  var parts = x.toString().split(\".\");\r\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  return parts.join(\".\");\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}